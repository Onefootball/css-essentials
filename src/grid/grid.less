@column-number:24;
@column-width: (100%/@column-number);
@gutter: 12px;

@import "common.less";

// output the grid
.generate-spacing-adjustment();
.generate-cols-groups();

//--------------- //
//   GENERATORS   //
//--------------- //

//column generator
.generate-cols(@colnum) when (@colnum > 0) {
  .generate-cols((@colnum - 1));    // next iteration
  .@{name}-col-@{colnum} {
    width: (@colnum * @column-width);
  }
}

//columns group generator
.generate-cols-groups(@n: (length(@breakpoints)), @i: 1) when (@i =< @n) {
  @name: extract(extract(@breakpoints, @i), 1);
  @vw: extract(extract(@breakpoints, @i), 2);
  @media(min-width: @vw) {
    .generate-cols(@column-number);
  }
  .generate-cols-groups(@n, (@i + 1)); // next iteration
}

// row adjustment generator
.generate-spacing-adjustment() {
  .optional-spacing() when (length(@breakpoints) > 1) {
    @smallestWidth: extract(extract(@breakpoints, 1), 2);
    @smallestClassName: extract(extract(@breakpoints, 1), 1);
    @othersWidth: extract(extract(@breakpoints, 2), 2);

    .gen(@colnum) when (@colnum > 0) {
      .gen((@colnum - 1));    // next iteration
      *[class*="-col-@{colnum}"] {
        width: (@colnum * @column-width);
      }
    }
    .gen(@column-number); // output base width

    @media(min-width: @smallestWidth) {
      .of-row {
        padding: 0 0.5*@gutter;
      }
    }
    @media(min-width: @othersWidth) {
      .of-row {
        padding: 0 1.5*@gutter;
      }
    }
  }
  .optional-spacing();
}
